<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SIHAN_LPC824_Gateway.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SIHAN_LPC824_Gateway.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Sat Apr 08 19:52:29 2017
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; handle_server_packet_thread &rArr; hwapi09_handle_packet_from_server &rArr; hwapi09_ack_error_to_server &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC_OVR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_OVR_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_OVR_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[19]">ADC_SEQA_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1a]">ADC_SEQB_IRQHanlder</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1b]">ADC_THCMP_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[16]">BOD_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[14]">CMP_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1d]">DMA_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[11]">I2C0_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[10]">I2C1_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1f]">I2C3_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[13]">MRT_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[20]">PIN_INT0_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[21]">PIN_INT1_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[22]">PIN_INT2_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[23]">PIN_INT3_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[24]">PIN_INT4_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[25]">PIN_INT5_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[26]">PIN_INT6_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[27]">PIN_INT7_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[2a]">Reset_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[12]">SCT_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[b]">SPI0_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[c]">SPI1_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_lpc8xx.o(.text) referenced from startup_lpc82x.o(.text)
 <LI><a href="#[d]">UART0_IRQHandler</a> from main.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[e]">UART1_IRQHandler</a> from main.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[f]">UART2_IRQHandler</a> from main.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[18]">WKT_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[2b]">__main</a> from __main.o(!!!main) referenced from startup_lpc82x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[30]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[34]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[af]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[39]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[31]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[33]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[35]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; handle_server_packet_thread &rArr; hwapi09_handle_packet_from_server &rArr; hwapi09_ack_error_to_server &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[38]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_packet_union
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rf433m_mode0_transport
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rf433m_mode1_transport
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_OVR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_OVR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC_SEQA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC_SEQB_IRQHanlder</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC_THCMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WKT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc82x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9b]"></a>createQueue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = createQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>

<P><STRONG><a name="[3d]"></a>is_queue_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;front
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dequeue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_server_packet_thread
</UL>

<P><STRONG><a name="[40]"></a>is_queue_full</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
</UL>

<P><STRONG><a name="[3c]"></a>Dequeue</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_server_packet_thread
</UL>

<P><STRONG><a name="[3e]"></a>front</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = front
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_server_packet_thread
</UL>

<P><STRONG><a name="[3f]"></a>Enqueue</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_full
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_server_packet_thread
</UL>

<P><STRONG><a name="[93]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_packet_from_server
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_ack_error_to_server
</UL>

<P><STRONG><a name="[c5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, system_lpc8xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, system_lpc8xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>CLEAR_UART_RECV</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_addr_channel
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart2_echo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart1_echo
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart0_echo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_thread
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
</UL>

<P><STRONG><a name="[58]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_packet_union
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_server_packet_thread
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rf433m_mode0_transport
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rf433m_mode1_transport
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi07_rf433m_set_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi07_rf433m_get_config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_addr_channel
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gprs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rj45_uart2
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi06_rj45_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi06_rj45_reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_uart2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi05_wifi_factory
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi04_wifi_reset
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi04_wifi_reset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart2_send
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart1_send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart0_send
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart2_echo
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi03_rf433m_mode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi02_led_ctrl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi01_beep_crtl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_thread
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
</UL>

<P><STRONG><a name="[9c]"></a>WKTInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>WKTdelayMs</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>gpio_ctrl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi06_rj45_reset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi05_wifi_factory
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi04_wifi_reset
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi03_rf433m_mode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi02_led3_ctrl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi02_led2_ctrl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi02_led1_ctrl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi01_beep_crtl
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_beep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_led
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_rf433m_mode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_wifi
</UL>

<P><STRONG><a name="[47]"></a>gpio_dir</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_beep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_led
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_rf433m_mode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_wifi
</UL>

<P><STRONG><a name="[46]"></a>gpio_init_wifi</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_init_wifi
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[49]"></a>gpio_init_rf433m_mode</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_init_rf433m_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[4a]"></a>gpio_init_led</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_init_led
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[4b]"></a>gpio_init_beep</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_init_beep
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[4c]"></a>GPIOInit</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOInit &rArr; gpio_init_beep
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_beep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_led
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_rf433m_mode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>UART0RecvEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_mod_uart0_baud
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>

<P><STRONG><a name="[cb]"></a>UART0RecvDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>UART0SendEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
</UL>

<P><STRONG><a name="[54]"></a>UART0SendDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>UART0Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0RecvEnable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>uart0_sendbuf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart0_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0SendEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_encode_packet_to_lock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_send
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_set_config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_addr_channel
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart0_send
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart0_echo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_thread
</UL>

<P><STRONG><a name="[d]"></a>UART0_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0SendDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART2SendEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
</UL>

<P><STRONG><a name="[55]"></a>uart2_sendbuf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SendEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_packet_union
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_ack_error_to_server
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_addr_channel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rj45_uart2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_uart2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart2_send
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart2_echo
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
</UL>

<P><STRONG><a name="[57]"></a>uart0_thread</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEAR_UART_RECV
</UL>

<P><STRONG><a name="[5a]"></a>uart2_thread</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEAR_UART_RECV
</UL>

<P><STRONG><a name="[5e]"></a>UART1SendEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
</UL>

<P><STRONG><a name="[5c]"></a>UART1SendDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>UART1RecvEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>UART1Init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>UART1_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>uart1_sendbuf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gprs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart1_send
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart1_echo
</UL>

<P><STRONG><a name="[60]"></a>UART2SendDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>UART2Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>UART2_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SendDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>hwapi01_beep_crtl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi01_beep_crtl
</UL>

<P><STRONG><a name="[62]"></a>test_hwapi01_beep_crtl</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi01_beep_crtl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[63]"></a>hwapi02_led1_ctrl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi02_led_ctrl
</UL>

<P><STRONG><a name="[64]"></a>hwapi02_led2_ctrl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi02_led_ctrl
</UL>

<P><STRONG><a name="[65]"></a>hwapi02_led3_ctrl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi02_led_ctrl
</UL>

<P><STRONG><a name="[66]"></a>test_hwapi02_led_ctrl</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi02_led3_ctrl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi02_led2_ctrl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi02_led1_ctrl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[67]"></a>hwapi03_rf433m_mode</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwapi03_rf433m_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_mode0_prepare
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_mode1_prepare
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_mode3_prepare
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi03_rf433m_mode
</UL>

<P><STRONG><a name="[68]"></a>test_hwapi03_rf433m_mode</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi03_rf433m_mode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[69]"></a>test_uart0_echo</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEAR_UART_RECV
</UL>

<P><STRONG><a name="[6a]"></a>test_uart1_echo</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEAR_UART_RECV
</UL>

<P><STRONG><a name="[6b]"></a>test_uart2_echo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEAR_UART_RECV
</UL>

<P><STRONG><a name="[6c]"></a>test_uart0_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[6d]"></a>test_uart1_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[6e]"></a>test_uart2_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[6f]"></a>hwapi04_wifi_reset</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi04_wifi_reset
</UL>

<P><STRONG><a name="[70]"></a>test_hwapi04_wifi_reset</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi04_wifi_reset
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[71]"></a>hwapi05_wifi_factory</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi05_wifi_factory
</UL>

<P><STRONG><a name="[72]"></a>test_hwapi05_wifi_factory</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi05_wifi_factory
</UL>

<P><STRONG><a name="[73]"></a>test_wifi_uart2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[74]"></a>hwapi06_rj45_reset</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi06_rj45_reset
</UL>

<P><STRONG><a name="[75]"></a>test_hwapi06_rj45_reset</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi06_rj45_reset
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[76]"></a>test_rj45_uart2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[77]"></a>gprs_reg</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[79]"></a>check_gprs_cmd_ack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
</UL>

<P><STRONG><a name="[78]"></a>gprs_close_echo</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[7a]"></a>gprs_att</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[7b]"></a>gprs_act</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[7c]"></a>gprs_connect_tcp</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reconnect_server
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[7e]"></a>gprs_trs_config</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reconnect_server
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[7f]"></a>gprs_trs_open</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reconnect_server
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[81]"></a>gprs_user_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reconnect_server
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[cd]"></a>gprs_close_tcp</STRONG> (Thumb, 14 bytes, Stack size 20 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>gprs_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_user_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reg
</UL>

<P><STRONG><a name="[82]"></a>gprs_reconnect_server</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_user_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
</UL>

<P><STRONG><a name="[83]"></a>test_gprs</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[84]"></a>hwapi07_mod_uart0_baud</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwapi07_mod_uart0_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0RecvEnable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_mode0_prepare
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_mode1_prepare
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_mode3_prepare
</UL>

<P><STRONG><a name="[85]"></a>hwapi07_rf433m_get_config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi07_rf433m_get_config
</UL>

<P><STRONG><a name="[86]"></a>hwapi07_rf433m_mode3_prepare</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwapi07_rf433m_mode3_prepare &rArr; hwapi07_mod_uart0_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_mod_uart0_baud
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi03_rf433m_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_addr_channel
</UL>

<P><STRONG><a name="[87]"></a>hwapi07_rf433m_get_addr_channel</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hwapi07_rf433m_get_addr_channel &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_mode3_prepare
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEAR_UART_RECV
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>hwapi07_rf433m_set_config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hwapi07_rf433m_set_config
</UL>

<P><STRONG><a name="[89]"></a>hwapi07_rf433m_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
</UL>

<P><STRONG><a name="[8a]"></a>test_hwapi07_rf433m_get_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_config
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[8b]"></a>test_hwapi07_rf433m_set_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_set_config
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[ce]"></a>test_rf433m_aux</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>hwapi08_rf433m_mode1_prepare</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_mod_uart0_baud
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi03_rf433m_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rf433m_mode1_transport
</UL>

<P><STRONG><a name="[8d]"></a>hwapi08_rf433m_send</STRONG> (Thumb, 58 bytes, Stack size 72 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rf433m_mode0_transport
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rf433m_mode1_transport
</UL>

<P><STRONG><a name="[8f]"></a>test_rf433m_mode1_transport</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_send
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_mode1_prepare
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[90]"></a>hwapi08_rf433m_mode0_prepare</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwapi08_rf433m_mode0_prepare &rArr; hwapi07_mod_uart0_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_mod_uart0_baud
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi03_rf433m_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rf433m_mode0_transport
</UL>

<P><STRONG><a name="[91]"></a>test_rf433m_mode0_transport</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_mode0_prepare
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[92]"></a>is_valid_packet_from_server</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_valid_packet_from_server &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_server_packet_thread
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_decode_packet_from_server
</UL>

<P><STRONG><a name="[cf]"></a>is_valid_packet_from_lock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>hwapi10_decode_packet_from_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>hwapi10_encode_packet_to_server</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>hwapi10_handle_packet_from_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>hwapi09_ack_error_to_server</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hwapi09_ack_error_to_server &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_handle_packet_from_server
</UL>

<P><STRONG><a name="[95]"></a>hwapi09_decode_packet_from_server</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hwapi09_decode_packet_from_server &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_packet_from_server
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_handle_packet_from_server
</UL>

<P><STRONG><a name="[96]"></a>hwapi09_encode_packet_to_lock</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hwapi09_encode_packet_to_lock &rArr; uart0_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_handle_packet_from_server
</UL>

<P><STRONG><a name="[97]"></a>hwapi09_handle_packet_from_server</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hwapi09_handle_packet_from_server &rArr; hwapi09_ack_error_to_server &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_encode_packet_to_lock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_decode_packet_from_server
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_ack_error_to_server
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_server_packet_thread
</UL>

<P><STRONG><a name="[98]"></a>handle_server_packet_thread</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = handle_server_packet_thread &rArr; hwapi09_handle_packet_from_server &rArr; hwapi09_ack_error_to_server &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;front
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dequeue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_handle_packet_from_server
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_packet_from_server
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>test_server_packet_union</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[9a]"></a>queue_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_init &rArr; createQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; handle_server_packet_thread &rArr; hwapi09_handle_packet_from_server &rArr; hwapi09_ack_error_to_server &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_server_packet_thread
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_mode0_prepare
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_addr_channel
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WKTInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_server_packet_union
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_encode_packet_to_lock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_decode_packet_from_server
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_ack_error_to_server
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_addr_channel
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
</UL>

<P><STRONG><a name="[d3]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[42]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_server_packet_thread
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_rf433m_get_addr_channel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_mod_uart0_baud
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>

<P><STRONG><a name="[d4]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi09_ack_error_to_server
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi08_rf433m_send
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_mod_uart0_baud
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[37]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_lpc8xx.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[db]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4f]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwapi07_mod_uart0_baud
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[a0]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
